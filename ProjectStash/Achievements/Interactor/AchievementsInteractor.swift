//
//  AchievementsInteractor.swift
//  ProjectStash
//
//  Created Julio Reyes on 7/25/18.
//  Copyright © 2018 Julio Reyes. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class AchievementsInteractor: AchievementsInteractorProtocol {
    var outputHandler: LocalDataManagerOutputProtocol?
    
    weak var presenter: AchievementsPresenterProtocol?
    var dataManager: LocalDataManagerInputProtocol?
    
    func retrieveInvestorList() {
        
        // Retrieve the List of achievements. It will populate the list from the Core Data store first. If it is unable to, it will get the information from the JSON file. in either case, the collection will be sent to the Presenter.
        do {
            if let investorList = try dataManager?.retrieveInvestorList(){
                // Create list of investors in adherence to the InvestorModel
                let investorModelList = try investorList.map(){ entry -> InvestorModel in
                    return try InvestorModel.init(entry.investorAchievements!)
                }
                if investorModelList.isEmpty{
                    dataManager?.retrieveInformationFromJSON()
                }else{
                    presenter?.didRetrieveAchievements(investorModelList)
                }
            }else{
                dataManager?.retrieveInformationFromJSON()
            }
        } catch  {
            presenter?.didRetrieveAchievements([])
        }
    }
}

extension AchievementsInteractor: LocalDataManagerOutputProtocol{
    func onAchievementsRetrieved(_ investor: [InvestorModel]) throws {
        presenter?.didRetrieveAchievements(investor)
        for investorModel in investor{
            do{
                try dataManager?.savePost(overview: investorModel.overview, achievements: investorModel.achievements)
            }catch{
                throw CoreDataError.couldNotSaveObject
            }
        }
    }
    
    func onError() {
        
    }
}
